{"version":3,"sources":["logo.svg","components/Navbar.js","pages/Page1.js","pages/Page2.js","pages/images/app_py.png","pages/images/code_1.PNG","pages/images/code_2.PNG","pages/images/python_eval_handler.png","pages/Page3.js","pages/Page4.js","pages/Page5.js","pages/Page6.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","to","Page1","Page2","Page3","src","app_py_img","python_eval_handler_img","code1","code2","Page4","useState","textAreaValue","setTextAreaValue","result","setResult","a","testObj","Code","console","log","postDetails","method","headers","body","JSON","stringify","fetch","response","json","data","align","autoComplete","autoCorrect","onChange","event","target","value","type","onClick","Page5","Page6","App","useEffect","document","title","Fragment","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.35c74b2e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Link } from \"react-router-dom\";\r\nimport \"./Navbar.css\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <Link className=\"link\" to=\"/page1\">\r\n        {\" \"}\r\n        Page 1\r\n      </Link>\r\n      <Link className=\"link\" to=\"/page2\">\r\n        {\" \"}\r\n        Page 2\r\n      </Link>\r\n      <Link className=\"link\" to=\"/page3\">\r\n        {\" \"}\r\n        Page 3\r\n      </Link>\r\n      <Link className=\"link\" to=\"/page4\">\r\n        {\" \"}\r\n        Page 4\r\n      </Link>\r\n      <Link className=\"link\" to=\"/page5\">\r\n        {\" \"}\r\n        Page 5\r\n      </Link>\r\n      <Link className=\"link\" to=\"/page6\">\r\n        {\" \"}\r\n        Page 6\r\n      </Link>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import \"./page.css\";\r\n\r\nconst Page1 = () => {\r\n  return (\r\n    <div className=\"outer-container\">\r\n      <div className=\"container\">\r\n        <h1 className=\"section-title\">Backend: Flask</h1>\r\n        <section>\r\n          <p>\r\n            Flask is one of the most popular Python web frameworks, with over\r\n            55K GitHub stars. The main advantage of using Flask over other\r\n            frameworks is that it is relatively lightweight (compared to other\r\n            frameworks, namely Django); it does not require any other tools or\r\n            libraries, does not contain database abstraction layers, form\r\n            validation, etc. This can be considered an advantage (less bloat,\r\n            libraries/tools not being used don't increase runtime requirements,\r\n            etc.), and also a disadvantage (if anything more complex needs to be\r\n            done, e.g., working with databases, external libraries will be\r\n            required, which may or may not add to the learning curve). With that\r\n            being said, more strengths and weaknesses of the framework are\r\n            listed below:{\" \"}\r\n          </p>\r\n        </section>\r\n\r\n        <h3 className=\"section-sub-title\">Strengths:</h3>\r\n        <section>\r\n          <ul>\r\n            <li>\r\n              Very flexible: Flask lets the developer control almost as much as\r\n              they desire due to how minimalist the framework is. In particular,\r\n              due to the limited tooling Flask provides, developers can choose\r\n              to either implement their own versions or find something someone\r\n              else already implemented\r\n            </li>\r\n            <li>\r\n              Easy to understand, learn, and work with: Due to how simple and\r\n              minimalistic the framework is, a new developer is able to pick up\r\n              the framework relatively quickly. Furthermore, since you're not\r\n              working with a bunch of tools to do one simple thing unlike other\r\n              frameworks, you are able to more quickly create something that\r\n              works and does something useful.\r\n            </li>\r\n            <li>\r\n              Facilitates easy and quick testing: Flask provides various\r\n              built-in support to do unit testing with relative ease.\r\n            </li>\r\n            <li>\r\n              Allows for experimentation: Since the framework is simple and\r\n              minimalistic, getting a quick web app up and running to experiment\r\n              with something new is easy with Flask.z\r\n            </li>\r\n            <li>\r\n              Open-source: Flask is open-source, meaning you can go in and\r\n              change what you'd like, create issues, submit pull requests to fix\r\n              issues, etc.\r\n            </li>\r\n            <li>\r\n              Community: Following from the previous point, there is a big\r\n              open-source community around Flask, so there will (usually) always\r\n              be someone that can help you out with any issues.\r\n            </li>\r\n          </ul>\r\n        </section>\r\n        <h3 className=\"section-sub-title\">Weaknesses:</h3>\r\n        <section>\r\n          <ul>\r\n            <li>\r\n              Possible scaling issues: As traffic grows to a website, the web\r\n              app needs to be able to scale as well. Flask is able to scale,\r\n              though a lot more manual work would be involved to get to that\r\n              point.\r\n            </li>\r\n            <li>\r\n              Modules: One of the strengths mentioned above is being able to\r\n              implement your own tooling or using something someone else has\r\n              already made. In both cases (though, the latter case is more\r\n              obvious), there could be security issues. In particular, if you\r\n              decide to use a module provided by someone else, you may not be\r\n              completely aware of the implementation and could open yourself up\r\n              to security breaches. Similarly, if you decide to implement your\r\n              own solution, it is important to ensure that the code you write is\r\n              secure and can't be exploited, which is especially so for more\r\n              crticial components of your application. With that being said, the\r\n              more eyes that are on a module/the code, the less of a chance for\r\n              a security issue to go unnoticed.\r\n            </li>\r\n          </ul>\r\n        </section>\r\n\r\n        <h2 className=\"section-title\">\r\n          Which developers use Flask, and what do they use it for?\r\n        </h2>\r\n        <section>\r\n          <p>\r\n            Primarily developers who are already familiar with Python or new\r\n            developers who want to create a web app relatively quickly. Flask\r\n            can be used to create any web app, though most use cases include,\r\n            but are not limited to, blog websites, content websites,\r\n            experimenting with a new web app idea before investing more\r\n            time/money/etc. with a more full framework (e.g., Django).\r\n          </p>\r\n        </section>\r\n\r\n\r\n        <h1 className=\"section-title\">Front End: React</h1>\r\n        <section>\r\n          <p>\r\n            React is a JavaScript library used to create dynamic and responsive\r\n            single page applications. It was created by Jordan Walke and\r\n            initially released in 2013. Today, it is listed as the most used web\r\n            framework among developers. React abstracts a lot of the complex\r\n            coding that was originally needed to create dynamic web pages which\r\n            is what makes it a powerfull and popular library.\r\n          </p>\r\n        </section>\r\n\r\n        <h3 className=\"section-sub-title\">Strengths:</h3>\r\n        <section>\r\n          <ul>\r\n            <li>\r\n              Easy to learn: React is an open source library which means there\r\n              are numerous tutorials and how-to videos on using the framework.\r\n              JavaScript is also an extremely popular language among developers\r\n              and anyone with a bakground in the language can pickup React\r\n              fairly quickly.\r\n            </li>\r\n            <li>\r\n              Reusability: React is based on building reusable components to\r\n              create a webpage. This enables developers to create basic building\r\n              block components that can then be reused as needed.\r\n            </li>\r\n            <li>\r\n              Facilitates easy and quick testing: Flask provides various\r\n              built-in support to do unit testing with relative ease.\r\n            </li>\r\n            <li>\r\n              Allows for experimentation: Since the framework is simple and\r\n              minimalistic, getting a quick web app up and running to experiment\r\n              with something new is easy with Flask.z\r\n            </li>\r\n            <li>\r\n              Mobile Design: A version of React known as React Native can be\r\n              used to build cross platform mobile applications. Once a developer\r\n              knows React they can use the same skills for mobile development.\r\n            </li>\r\n            <li>\r\n              Efficiency: React uses a virtual DOM which means it only\r\n              re-renders components that require re-evaluation. This feautre\r\n              improves the ovearall performance of the webpage.\r\n            </li>\r\n          </ul>\r\n        </section>\r\n        <h3 className=\"section-sub-title\">Weaknesses:</h3>\r\n        <section>\r\n          <ul>\r\n            <li>\r\n              JSX: While the React library and concepts are fairly easy to learn\r\n              , the JSX syntax can take some time to grasp. JSX stands for\r\n              JavaScriptHTML and is what enables developers to write HTML\r\n              alongside JavaScript\r\n            </li>\r\n            <li>\r\n              Pace of development: This can be seen as both a pro and a con. The\r\n              react library is constantly growing at a rapid pace and this\r\n              allows developers to use new and evolving technologies. However,\r\n              due to the this rapid growth, the documentation for certain things\r\n              can be lacking\r\n            </li>\r\n          </ul>\r\n        </section>\r\n\r\n        <h2 className=\"section-title\">\r\n          What developers are using React, and what are they using it for?\r\n        </h2>\r\n        <section>\r\n          <p>\r\n            Developers who are comfortable with JavaScript and want dynamic\r\n            single page applications are most commonly using React. React can\r\n            easily be installed in a matter of minutes which makes it an\r\n            excellent choice for frontend web development. Some websites that\r\n            are currently using React include Netflix, Facebook, Airbnb and\r\n            Reddit.\r\n          </p>\r\n        </section>\r\n\r\n        <h1 className=\"section-title\">References</h1>\r\n        <section>\r\n          <ul>\r\n            <li>https://www.statista.com/statistics/1124699/worldwide-developer-survey-most-used-frameworks-web/</li>\r\n            <li>https://www.simform.com/blog/websites-use-react/</li>\r\n            <li>https://dev.to/detimo/python-flask-pros-and-cons-1mlo</li>\r\n            <li>https://www.stxnext.com/blog/flask-vs-django-comparison/</li>\r\n            <li>https://www.javatpoint.com/pros-and-cons-of-react</li>\r\n            <li>https://github.com/pallets/flask</li>\r\n            <li>https://github.com/django/django</li>\r\n            <li>https://dev.to/detimo/python-flask-pros-and-cons-1mlo</li>\r\n            <li>https://www.stxnext.com/blog/flask-vs-django-comparison/</li>\r\n            <li>https://dev.to/amigosmaker/what-is-flask-used-for-2do5</li>\r\n          </ul>\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page1;\r\n","const Page2 = () => {\r\n  return (\r\n    <div className=\"outer-container\">\r\n      <div className=\"container\">\r\n        <h1 className=\"section-title\">Installing Backend Framework: Flask</h1>\r\n        <section>\r\n          <p>\r\n            The process of installing Flask is quite straightforward, and best\r\n            of all, system-indepdent. The steps below assume Python is already\r\n            installed (preferably, Python 3 or later).\r\n          </p>\r\n        </section>\r\n\r\n        <h2 className=\"section-sub-title\">Pre Installation Steps [OPTIONAL]</h2>\r\n        <section>\r\n          <p>\r\n            Python packages are installed globally on the system, meaning that\r\n            once you install a package once, you'll be able to use it in ANY\r\n            project. Sometimes this is nice, however, it's better practice to\r\n            localize dependencies to per-project so you don't end up\r\n            accidentally using a package locally that's available on your system\r\n            and after deploying to an external server, end up finding you have\r\n            dependency issues due to not including it in some dependency\r\n            management definition. To solve this problem, Python virtual\r\n            environments were created. There are a few different popular\r\n            choices, some of which include venv and conda.\r\n          </p>\r\n        </section>\r\n\r\n        <h3 className=\"section-sub-title\">Installing venv</h3>\r\n        <section>\r\n          <p>\r\n            This is a more straightforward approach. Documentation for venv can\r\n            be found on https://docs.python.org/3/library/venv.html\r\n          </p>\r\n        </section>\r\n\r\n        <h3 className=\"section-sub-title\">Installing conda</h3>\r\n        <section>\r\n          <p>\r\n            Installation steps can be found on\r\n            https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html\r\n          </p>\r\n        </section>\r\n\r\n        <h3 className=\"section-sub-title\">Creating the environment</h3>\r\n        <section>\r\n          <p>\r\n            Installation steps can be found on\r\n            https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html\r\n          </p>\r\n        </section>\r\n\r\n        <h4 className=\"section-sub-title\">venv</h4>\r\n        <section>\r\n          <p className=\"cmd\">python -m venv /path/to/env</p>\r\n          <p>Activating venv (note that this is specific to *nix systems):</p>\r\n          <p className=\"cmd\">source /path/to/env/bin/activate</p>\r\n        </section>\r\n        <h4 className=\"section-sub-title\">conda</h4>\r\n        <section>\r\n          <p className=\"cmd\">conda create -n ENV_NAME [python=version] [any other dependencies]</p>\r\n          <p>Example usage:</p>\r\n          <p className=\"cmd\">conda create -n testenv python=3.9</p>\r\n          <p>Activating conda environment:</p>\r\n          <p className=\"cmd\">conda activate ENV_NAME</p>\r\n          <p>For our example above, we can run:</p>\r\n          <p className=\"cmd\">conda activate testenv</p>\r\n        </section>\r\n\r\n        <h2 className=\"section-title\">Installing Flask</h2>\r\n        <section>\r\n          <p className=\"cmd\">pip install flask</p>\r\n          <p>\r\n            Note: if you have multiple major versions of Python installed (e.g.,\r\n            Python 2 and Python 3), you may need to append a version to the pip\r\n            command. For example, for Python 3, you would do:\r\n          </p>\r\n          <p className=\"cmd\">pip3 install flask</p>\r\n        </section>\r\n\r\n        <h1 className=\"section-title\">Installing Frontend Framework: React</h1>\r\n\r\n        <h2 className=\"section-sub-title\">Install Node</h2>\r\n        <section>\r\n          <ul>\r\n            <li>\r\n              Node is a JavaScript runtime environment and comes with the npm\r\n              package manager.\r\n            </li>\r\n            <li>Download Node from: https://nodejs.org/en/</li>\r\n          </ul>\r\n        </section>\r\n\r\n        <h2 className=\"section-sub-title\">Create React App</h2>\r\n        <section>\r\n\r\n                <h3> Project directory</h3>\r\n                <p className=\"cmd\">cd my-project</p>\r\n                <h3> Create app</h3>\r\n                <p className=\"cmd\">npx create-react-app my-app</p>\r\n                <h3>Run App</h3>\r\n                <p className=\"cmd\">cd my-app</p>\r\n                <p className=\"cmd\">npm start</p>\r\n                <p>React app should now be running on localhost:5000</p>\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page2;\r\n","export default __webpack_public_path__ + \"static/media/app_py.e66e45df.png\";","export default __webpack_public_path__ + \"static/media/code_1.d0f17e5d.PNG\";","export default __webpack_public_path__ + \"static/media/code_2.5c19842b.PNG\";","export default __webpack_public_path__ + \"static/media/python_eval_handler.046d0ba3.png\";","import \"./page.css\";\r\nimport app_py_img from \"./images/app_py.png\";\r\nimport code1 from \"./images/code_1.PNG\";\r\nimport code2 from \"./images/code_2.PNG\";\r\nimport python_eval_handler_img from \"./images/python_eval_handler.png\";\r\n\r\nconst Page3 = () => {\r\n  return (\r\n    <div className=\"outer-container\">\r\n      <div className=\"container\">\r\n        <h1 className=\"section-title\">\r\n          Creating a Python Interpreter: Backend\r\n        </h1>\r\n        <section>\r\n          <p>\r\n            Before getting started, ensure you have followed the tutorial on how\r\n            to install Flask on Page 2. Additionally, you will need a couple\r\n            extra dependencies. You can install them using pip (or pip3 if\r\n            you're using Python 3.x):\r\n          </p>\r\n          <p className=\"cmd\">pip install flask_restful</p>\r\n          <p className=\"cmd\">pip install flask_cors</p>\r\n        </section>\r\n\r\n        <h2>Required directories</h2>\r\n        <section>\r\n          <p>Create the following directories:</p>\r\n          <ul>\r\n            <li>api</li>\r\n            <li>frontend</li>\r\n          </ul>\r\n          <p>These will be used throughout the tutorial.</p>\r\n        </section>\r\n\r\n        <h2>app.py</h2>\r\n        <section>\r\n          <p>\r\n            In your project root directory, create a new file named `app.py` and\r\n            add the following:\r\n          </p>\r\n          <img src={app_py_img}></img>\r\n          <p>\r\n            The beginning part of this code initializes the app by instantiating\r\n            a new Flask instance. We then enable CORS (Cross Origin Resource\r\n            Sharing) for local development. Afterwards, we construct a\r\n            flask_resful Api instance to faciliate our REST API.\r\n          </p>\r\n          <p>\r\n            After our setup, we create a function which will listen for requests\r\n            on the \"/\" endpoint. When a request is received, it will serve\r\n            index.html from our frontend/build directory.\r\n          </p>\r\n          <p>\r\n            Finally, we add a resource to our api object we created earlier. In\r\n            particular, this will register the handler for requests we will\r\n            receive from our frontend. Keep note of the `/pyinterpreter/eval`\r\n            path, we'll be needing it for the React part of this tutorial later.\r\n          </p>\r\n        </section>\r\n\r\n        <h2>api/python_eval_handler.py</h2>\r\n        <section>\r\n          <p>\r\n            Create a new file in the api directory called\r\n            `python_eval_handler.py`. This will file will contain:\r\n          </p>\r\n          <img src={python_eval_handler_img}></img>\r\n          <p>Explanation of what's happening in the code above:</p>\r\n          <ol>\r\n            <li>\r\n              We create a class (PythonEvalHandler) which inherits the Resource\r\n              class. This will allow us to define our REST API.\r\n            </li>\r\n            <li>\r\n              We define a post method, indicating that we'll specifically be\r\n              handling the HTTP POST method.\r\n            </li>\r\n            <li>\r\n              When we receive a request to the API, we want to get the content\r\n              of the request. This line takes that content and interprets that\r\n              as JSON. The line directly under extracts the \"Code\" field in the\r\n              JSON which contains the full code we want to execute.\r\n            </li>\r\n            <li>\r\n              Instantiating StringIO will allow us to be able to capture stdout\r\n              when we execute the code.\r\n            </li>\r\n            <li>\r\n              We use contextlib's redirect_stdout to be able to redirect and\r\n              store stdout to our instantiated StringIO from the block of code\r\n              executed below.\r\n            </li>\r\n            <li>\r\n              This line extracts all the output we got from stdout and stores it\r\n              in a variable.\r\n            </li>\r\n            <li>\r\n              We prepare our JSON response by including a status and result\r\n              field. You can include any other fields you like here. We then\r\n              return the response which will be automatically sent to the client\r\n              by Flask.\r\n            </li>\r\n          </ol>\r\n          <p>\r\n            <b>That's all!</b> The backend portion of the tutorial is done.\r\n          </p>\r\n        </section>\r\n        <h1 className=\"section-title\">\r\n          Creating a Python Interpreter: Frontend\r\n        </h1>\r\n        <section>\r\n          <p><b>Run the following commands to initiate the react app:</b></p>\r\n          <p className=\"cmd\">cd frontend</p>\r\n          <p className=\"cmd\">npx-create-react-app</p>\r\n        </section>\r\n\r\n        <p><b>In the src folder add the following code:</b></p>\r\n        <img src={code1}></img>\r\n        <section>\r\n          <p>\r\n            1. This is an event listener that listens to entered text in the\r\n            text area.\r\n          </p>\r\n          <p>\r\n            2. This Asynchronous function will make the call to Flask with the\r\n            Python code to be run.\r\n          </p>\r\n          <p>\r\n            3. Details about the protocol used for the POST method along with\r\n            the data being sent.\r\n          </p>\r\n        </section>\r\n\r\n        <section>\r\n        <img src={code2}></img>\r\n        <p>\r\n          4. Flask has responded with the interpreted Python results, and set the\r\n          results text field with it.\r\n        </p>\r\n        <p>5. This is the JSX code for the text areas and results area.</p>\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page3;\r\n","import axios from \"axios\";\r\nimport \"./page4.css\";\r\nimport { useState } from \"react\";\r\n\r\nconst DEFAULT_CODE_STRING = `# write code here\r\ndef print_hello_world():\r\n  print(\"Hello, World!\")\r\n\r\nprint_hello_world()\r\n\r\n# press the \"EXECUTE CODE\" button to run this code!\r\n`;\r\n\r\nconst Page4 = () => {\r\n  const [textAreaValue, setTextAreaValue] = useState(DEFAULT_CODE_STRING);\r\n  const [result, setResult] = useState(\"Results will appear here once you execute some code\");\r\n\r\n  //#1\r\n  const onKeyEnteredHandler = (event) => {\r\n    setTextAreaValue(event.target.value);\r\n  };\r\n\r\n  //#2\r\n  async function onSubmitHandler() {\r\n    let testObj = {\r\n      Code: textAreaValue,\r\n    };\r\n    console.log(textAreaValue);\r\n\r\n    //#3\r\n    const postDetails = {\r\n      method: \"POST\",\r\n      headers: { \"Content-type\": \"application.json\" },\r\n      body: JSON.stringify(testObj),\r\n    };\r\n    const response = await fetch(\r\n      \"https://cps530-react-flask.herokuapp.com/pyinterpreter/eval\",\r\n      postDetails\r\n    );\r\n    const data = await response.json();\r\n  //#4\r\n    setResult(data.result);\r\n  }\r\n\r\n  //#5\r\n  return (\r\n    <div align=\"center\">\r\n      <textarea\r\n        className=\"code-area\"\r\n        autoComplete=\"off\"\r\n        autoCorrect=\"off\"\r\n        onChange={onKeyEnteredHandler}\r\n        value={textAreaValue}\r\n      >\r\n        Type here\r\n      </textarea>\r\n      <br></br>\r\n      <button className=\"execute-code-button\" type=\"submit\" onClick={onSubmitHandler}>\r\n        EXECUTE CODE\r\n      </button>\r\n      <br></br>\r\n\r\n      <h3 className=\"result-area-header\">EXECUTION RESULTS</h3>\r\n      <textarea \r\n        className=\"result-area\"\r\n        value={result}\r\n      >\r\n      </textarea>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page4;\r\n","import \"./page.css\";\r\n\r\nconst Page5 = () => {\r\n  return (\r\n    <div className=\"outer-container\">\r\n      <div className=\"container\">\r\n        <h1> Summary</h1>\r\n        <p>\r\n          Overall the experience of using Flask and React went fairly well.\r\n          Flask was easy to install and configure making it optimal for a small\r\n          project such as this. Being able to easily define REST endpoints\r\n          within the Flask architecture allowed us to quickly link our React\r\n          frontend with our backend. Using the npm package manager made\r\n          installing and creating the React frontend very simple; this process\r\n          took about five minutes. Configuring links to each of the different\r\n          pages took a little more work due to the fact that React apps use the\r\n          Single Page Application (SPA) architecture. \r\n          </p>\r\n          <p>\r\n          The learning curve to\r\n          learn both Flask and React wasn't too steep, as what was required to\r\n          get a working website up and running wasn't too complex and, instead,\r\n          quite straightforward. The code we wrote felt like an extension to\r\n          what we did when we learned HTML/CSS/JavaScript/PHP, and that there\r\n          was a lot more abstraction and various (straightforward) concepts to\r\n          (1) make it easier to create a website, and (2) to be able to do more\r\n          powerful things. \r\n          </p>\r\n          <p>\r\n          We would not do things differently in retrospect, as\r\n          we're quite happy with how our end product turned out. However, if we\r\n          were to go back to this project, and assuming we had more time, we'd\r\n          definitely make this project more feature filled as it has quite a bit\r\n          of potential.\r\n          </p>\r\n          \r\n          <p>\r\n           Flask and React are both great frameworks, and\r\n          definitely solid choices we'd choose for future projects. Thus, we\r\n          have no regrets in the frameworks we chose, and mostly have positive\r\n          things to say about them.\r\n          </p>\r\n    \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page5;\r\n","import \"./page.css\";\r\n\r\nconst Page6 = () => {\r\n  return (\r\n    <div className=\"outer-container\">\r\n      <div className=\"container\">\r\n        <h1 className=\"section-title\">Team Members</h1>\r\n        <h2>Nathaniel Hans</h2>\r\n        <ul>\r\n            <li>Installed and configured React</li>\r\n            <li>Setup React Routing for pages</li>\r\n            <li>Handle the user input and POST method to backend</li>\r\n            <li>Handle response from the backend</li>\r\n            <li>React installation guide</li>\r\n            <li>Creating a Python interpreter: React tutorial</li>\r\n        </ul>\r\n        <h2>Sulaxan Pius</h2>\r\n        <ul>\r\n            <li>Installed and configured Flask</li>\r\n            <li>Setup backend endpoints for Python code execution</li>\r\n            <li>Implemented execution of Python code</li>\r\n            <li>Styling for interpreter</li>\r\n            <li>Flask installation guide</li>\r\n            <li>Creating a Python interpreter: Flask tutorial</li>\r\n        </ul>\r\n\r\n        <h1 className=\"section-title\">References</h1>\r\n        <section>\r\n          <ul>\r\n            <li>https://www.statista.com/statistics/1124699/worldwide-developer-survey-most-used-frameworks-web/</li>\r\n            <li>https://www.simform.com/blog/websites-use-react/</li>\r\n            <li>https://dev.to/detimo/python-flask-pros-and-cons-1mlo</li>\r\n            <li>https://www.stxnext.com/blog/flask-vs-django-comparison/</li>\r\n            <li>https://www.javatpoint.com/pros-and-cons-of-react</li>\r\n            <li>https://github.com/pallets/flask</li>\r\n            <li>https://github.com/django/django</li>\r\n            <li>https://dev.to/detimo/python-flask-pros-and-cons-1mlo</li>\r\n            <li>https://www.stxnext.com/blog/flask-vs-django-comparison/</li>\r\n            <li>https://dev.to/amigosmaker/what-is-flask-used-for-2do5</li>\r\n          </ul>\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page6;\r\n","import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Page1 from \"./pages/Page1\";\r\nimport Page2 from \"./pages/Page2\";\r\nimport Page3 from \"./pages/Page3\";\r\nimport Page4 from \"./pages/Page4\";\r\nimport Page5 from \"./pages/Page5\";\r\nimport Page6 from \"./pages/Page6\";\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    document.title = \"CPS530 - Term Project\"\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Navbar />\r\n      <Route path = '/page1'>\r\n        <Page1/>\r\n      </Route>\r\n      <Route path = '/page2'>\r\n        <Page2/>\r\n      </Route>\r\n      <Route path = '/page3'>\r\n        <Page3/>\r\n      </Route>\r\n      <Route path = '/page4'>\r\n        <Page4/>\r\n      </Route>\r\n      <Route path = '/page5'>\r\n        <Page5/>\r\n      </Route>\r\n      <Route path = '/page6'>\r\n        <Page6/>\r\n      </Route>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}